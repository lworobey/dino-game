#######DO THIS FIRST pip install Pillow

"""
This file is was generated by AI,
this file was just made to check the coordinates of the image
and to make sure the coordinates are correct

This file opens two windows,
1. The first window is the full image, and clicking on the image will print the coordinates of that point to the terminal. 
Pressing enter will print the current coordinates of the selected region to the terminal
2. The second window is a preview of the selected region.

The full image window has sliders to adjust the coordinates and size of the selected region.

Feel free to do this with any image instead of using one of those online tools that make you create an account. Ugh, so annoying.
"""
import tkinter as tk
from PIL import Image, ImageTk

# Variables for image selection
selection_x = 936  # X coordinate in source image
selection_y = 2   # Y coordinate in source image 
selection_width = 44  # Width of selection
selection_height = 47 # Height of selection

def update_selection(*args):
    global selection_x, selection_y, selection_width, selection_height
    selection_x = x_scale.get()
    selection_y = y_scale.get()
    selection_width = width_scale.get()
    selection_height = height_scale.get()
    update_preview()

def on_image_click(event):
    # Print click coordinates
    print(f"Clicked at x={event.x}, y={event.y}")

def handle_keypress(event):
    # Map keys to sliders
    key_to_slider = {
        'Left': {'x': -1, 'y': -1, 'width': -1, 'height': -1},
        'Right': {'x': 1, 'y': 1, 'width': 1, 'height': 1}
    }
    
    # Map keys to control which slider is active
    active_slider = None
    if event.keysym == 'a' or event.keysym == 'd':
        active_slider = x_scale
    elif event.keysym == 'w' or event.keysym == 's':
        active_slider = y_scale
    elif event.keysym == 'q' or event.keysym == 'e':
        active_slider = width_scale
    elif event.keysym == 'z' or event.keysym == 'c':
        active_slider = height_scale
    elif event.keysym == 'Return':
        print(f"Current selection: x={selection_x}, y={selection_y}, width={selection_width}, height={selection_height}")
        
    if active_slider:
        current = active_slider.get()
        if event.keysym in ['a', 'w', 'q', 'z']:
            active_slider.set(current - 1)
        elif event.keysym in ['d', 's', 'e', 'c']:
            active_slider.set(current + 1)

def create_preview_window():
    # Create new window for preview
    preview_window = tk.Toplevel(root)
    preview_window.title("Preview Window")
    preview_window.geometry("400x500")
    
    # Create frame for image preview
    preview_frame = tk.Frame(preview_window)
    preview_frame.pack(pady=10)
    
    # Create label to show selected region
    preview_label = tk.Label(preview_frame)
    preview_label.pack()
    
    # Create label for coordinates
    coords_label = tk.Label(preview_window, text="", font=("Arial", 12))
    coords_label.pack(pady=10)
    
    def update_preview():
        # Get selected region from main image
        img = Image.open(image_path)
        region = img.crop((selection_x, selection_y,
                          selection_x + selection_width,
                          selection_y + selection_height))
        
        # Convert to PhotoImage and display
        preview_img = ImageTk.PhotoImage(region)
        preview_label.configure(image=preview_img)
        preview_label.image = preview_img
        
        # Update coordinates text
        coords_text = f"Source coordinates: ({selection_x}, {selection_y})\n" \
                     f"Size: {selection_width}x{selection_height}"
        coords_label.config(text=coords_text)
    
    return update_preview

# Create main window
root = tk.Tk()
root.title("Image Region Selector")

# Load and display full image
image_path = "sprites.png"
img = Image.open(image_path)
img_tk = ImageTk.PhotoImage(img)
image_label = tk.Label(root, image=img_tk)
image_label.pack()

# Bind click event to image label
image_label.bind('<Button-1>', on_image_click)

# Bind keys for slider control
root.bind('<KeyPress>', handle_keypress)

# Add sliders for adjusting coordinates and size
control_frame = tk.Frame(root)
control_frame.pack(pady=10)

x_scale = tk.Scale(control_frame, from_=0, to=1236, orient=tk.HORIZONTAL, label="X Position (A/D)", length=200, command=update_selection)
x_scale.set(selection_x)
x_scale.pack(side=tk.LEFT, padx=5)

y_scale = tk.Scale(control_frame, from_=0, to=103, orient=tk.HORIZONTAL, label="Y Position (W/S)", length=200, command=update_selection)
y_scale.set(selection_y)
y_scale.pack(side=tk.LEFT, padx=5)

width_scale = tk.Scale(control_frame, from_=1, to=200, orient=tk.HORIZONTAL, label="Width (Q/E)", length=200, command=update_selection)
width_scale.set(selection_width)
width_scale.pack(side=tk.LEFT, padx=5)

height_scale = tk.Scale(control_frame, from_=1, to=200, orient=tk.HORIZONTAL, label="Height (Z/C)", length=200, command=update_selection)
height_scale.set(selection_height)
height_scale.pack(side=tk.LEFT, padx=5)

# Create preview window and get update function
update_preview = create_preview_window()

# Show initial preview
update_preview()

root.mainloop()


#"X Position (A/D)"
#"Y Position (W/S)"
#"Width (Q/E)"
#"Height (Z/C)"
